//
//  Beta.swift
//  Numerical
//
//  Created by Adam Roberts on 9/25/18.
//

import Foundation

/// Beta function
///
/// B(a, b) = ‚à´0..1 t^(a - 1) (1 - t)^(b - 1) dt
///
/// = ùõ§(a) ùõ§(b) / ùõ§(a + b)
public func beta(a: Double, b: Double) -> Double {
    if (a + b > 100) { return exp(lbeta(a: a, b: b)) }
    return tgamma(a) * tgamma(b) / tgamma(a + b)
}

/// Log of Beta function
///
/// log B(a, b) = log ùõ§(a) + log ùõ§(b) - log ùõ§(a + b)
public func lbeta(a: Double, b: Double) -> Double {
    return lgamma(a) + lgamma(b) - lgamma(a + b)
}

/// Regularized Incomplete Beta function
///
/// I(x, a, b) = B(x, a, b) / B(a, b), B(x, a, b)
///
/// B(x, a, b) = ‚à´0..x t^(a - 1) (1 - t)^(b - 1) dt where a, b > 0
///
/// We follow the approach advised by Temme in the Numerical Aspects part of
/// his chapter (¬ß11.3.4), however the continued fraction is currently used everywhere.
///
/// Special Functions, N.M. Temme, 1996, ¬ß11.3
public func betaReg(xy: Probability, a: Double, b: Double) -> Probability {
    let x = xy.p
    let y = xy.q
    
    // Inflection point x‚ÇÄ = a / (a + b)
    let x‚ÇÄ = a / (a + b)
    switch (x,y,a,b) {
        // handle domain edges
    case (_,_,...0,_): return .nan
    case (_,_,_,...0): return .nan
    case (..<0,_,_,_): return .nan
    case (1.nextUp...,_,_,_): return .nan
    case (0,_,_,_): return .p(0)
    case (_,0,_,_): return .q(0)
        
        // for x > x‚ÇÄ we use I(1 - x,a,b) = 1 - I(x,b,a), Eq. 11.30
    case (x‚ÇÄ.nextUp...,_,_,_): return betaReg(xy: xy.complement, a: b, b: a).complement
        
        // for most of the domain we can use the continued fraction
    case (_,_,_,_): return beta_reg_frac(xy: xy, a: a, b: b)
    }
}

public func betaReg(x: Double, a: Double, b: Double) -> Probability {
    return betaReg(xy: .p(x), a: a, b: b)
}

/// Continued Fraction estimate of Regularized Incomplete Beta Function
///
/// A continued fraction representation of the regularized incomplete beta function:
///
/// I‚Çì(a,b) = x^a (1 - x)^b / (a B(a,b) ) (1 / (1 +) d‚ÇÅ / (1 +) d‚ÇÇ / (1 +) d‚ÇÉ / (1 +) ), Eq. 8.17.22
///
/// d_{2m} = m (b - m) x / (a + 2m - 1) / (a + 2m)
///
/// d_{2m+1} = -(a + m) (a + b + m) x / (a + 2m) / (a + 2m - 1), Eq. 8.17.23
///
/// This continued fraction works well for a wide range of values. Avoid when x is close to x‚ÇÄ = a / (a + b).
///
/// NIST Handbook of Mathematical Functions, 2010
fileprivate func beta_reg_frac(xy: Probability, a: Double, b: Double) -> Probability {
    let x = xy.p
    let y = xy.q
    let prefix = pow(x,a) * pow(y,b) / (a * beta(a: a, b: b))
    let cf = continuedFraction(b0: 0, a: { i in
        let mInt = (i - 1) / 2
        let m = Double(mInt)
        switch (i - 1) {
        case 0:
            return 1
        case 2 * mInt + 1:
            return -(a + m) * (a + b + m) / (a + 2 * m) / (a + 2 * m + 1) * x
        case _:
            return m * (b - m) / (a + 2 * m - 1) / (a + 2 * m) * x
        }
    }, b: { _ in 1 })
    return Probability(p: prefix * cf.value)
}

/// Asymptotic expansion of Incomplete Beta Function when `a` is large and a ‚â´ b
///
/// As a ‚Üí ‚àû with b and x fixed we have the following expansion (originally from Temme):
///
/// I(x, a, b) = ùõ§(a + b) / ùõ§(a) Œ£i=0... d·µ¢F·µ¢, Eq. 2
///
/// Where the F·µ¢ have the following recurrence relationship:
///
/// aF·µ¢‚Çä‚ÇÅ = (i + b - aŒæ)F·µ¢ + iŒæF·µ¢‚Çã‚ÇÅ, Eq. 3
///
/// F‚ÇÄ = a^(-b) Q(b,aŒæ),
///
/// F‚ÇÅ = (b - aŒæ) F‚ÇÄ / a + Œæ^b e^(-aŒæ) / (aùõ§(b))
///
/// The coefficients d·µ¢ have the generating function:
///
/// ((1 - e^(-t)) / t) ^ (b - 1) = Œ£i=0... d·µ¢(t - Œæ)‚Å±
///
/// "Uniform Asymptotic Expansion for the Incomplete Beta Function", Nemes & Olde Daalhius, 2016
///
/// Special Functions, N. M. Temme, 1996, ¬ß11.3.3.1
fileprivate func beta_reg_biga(x: Double, a: Double, b: Double) -> Double {
    let Œæ = -log(x)
    
    /// ùõ§(a + b) / ùõ§(a), Eq. 2
    let prefix = exp(lgamma(a + b) - lgamma(a))
    
    let F‚ÇÄ = pow(a, -b) * gammaReg(b, a * Œæ).q
    let F‚ÇÅ = (b - a * Œæ) / a * F‚ÇÄ + pow(Œæ, b) * exp(-a * Œæ) / (a * tgamma(b))
    let F·µ¢‚Çä‚ÇÅ = { (n: Double, Fn: Double, Fnm1: Double) -> Double in
        return 1 / a * ((n + b - a * Œæ) * Fn + n * Œæ * Fnm1)
    }
    
    /// d‚ÇÄ = ((1 - x) / Œæ)^(b - 1), Eq. 4
    let d‚ÇÄ = pow((1 - x) / Œæ, b - 1)
    /// d‚ÇÅ = (xŒæ + x - 1) (b - 1) d‚ÇÄ / ((1 - x)Œæ), Eq. 4
    let d‚ÇÅ = (x * Œæ + x - 1) * (b - 1) * d‚ÇÄ / (1 - x) / Œæ
    /// Œæ(i + 1)(i + 2)d‚ÇÄ d·µ¢‚Çä‚ÇÇ = s‚ÇÅ + s‚ÇÇ + s‚ÇÉ, Eq. 5
    let d·µ¢‚Çä‚ÇÇ = { (d: [Double]) -> Double in
        /// if b = 1 all terms after the first are zero
        if b == 1 { return 0 }
        
        /// infer i from number of previous terms. e.g. when computing d‚ÇÇ we have |(d‚ÇÄ,d‚ÇÅ)| = 2 and i = 0.
        /// here we use the m and n terminology from Nemes.
        let nint = d.count - 2
        if nint < 0 { return .nan }
        let n = Double(nint)
        
        /// prefix = 1 / (Œæ(i + 1)(i + 2)d‚ÇÄ)
        let prefix = 1 / Œæ / (n + 1) / (n + 2) / d[0]
        
        /// s‚ÇÅ = Œæ Œ£m=0...i (m + 1)(n - 2m + 1 + (m - n - 1)/(b - 1)) d_(m+1) d_(n - m + 1)
        let s‚ÇÅ = Œæ * (0...nint).map { mint in
            let m = Double(mint)
            return (m + 1) * (n - 2 * m + 1 + (m - n - 1) / (b - 1)) * d[mint + 1] * d[nint - mint + 1]
        }.sumNaive()
        /// s‚ÇÇ = Œ£m=0...i (m + 1)(n - 2m - 2 - Œæ + (m - n) / (b - 1)) d_(m+1) d_(n - m)
        let s‚ÇÇ = (0...nint).map { mint -> (Double) in
            let m = Double(mint)
            return (m + 1) * (n - 2 * m - 2 - Œæ + (m - n) / (b - 1)) * d[mint + 1] * d[nint - mint]
        }.sumNaive()
        /// s‚ÇÉ = Œ£m=0...i (1 - m - b) d_m d_(n - m)
        let s‚ÇÉ = (0...nint).map { mint -> (Double) in
            let m = Double(mint)
            return (1 - m - b) * d[mint] * d[nint - mint]
        }.sumNaive()
        return prefix * (s‚ÇÅ + s‚ÇÇ + s‚ÇÉ)
    }
    
    let r = series(indices: 1..., initialSum: d‚ÇÄ * F‚ÇÄ + d‚ÇÅ * F‚ÇÅ, initialState: (F·µ¢‚Çã‚ÇÅ: F‚ÇÄ, F·µ¢: F‚ÇÅ, d:[d‚ÇÄ,d‚ÇÅ])) { i, previous in
        let (F·µ¢‚Çã‚ÇÅ,F·µ¢,d) = previous
        let F = F·µ¢‚Çä‚ÇÅ(Double(i), F·µ¢, F·µ¢‚Çã‚ÇÅ)
        let dnew = d·µ¢‚Çä‚ÇÇ(d)
        return (dnew * F, (F·µ¢‚Çã‚ÇÅ: F·µ¢, F·µ¢: F, d:d + [dnew]))
    }
    
    return prefix * r.value
}

/// Derivative of Regularized Incomplete Beta function
///
/// I'(x, a, b) = x^(a - 1) (1 - x)^(b - 1) / B(a, b)
public func betaRegDeriv(x: Double, a: Double, b: Double) -> Double {
    switch (x,a,b) {
    case (_,...0,_): return .nan
    case (_,_,...0): return .nan
    case (..<0,_,_): return .nan
    case (1.0.nextUp...,_,_): return .nan
    case (0,..<1,_): return .nan
    case (0,1,_): return 1 / beta(a: a,b: b)
    case (0,_,_): return 0
    case (1,_,..<1): return .nan
    case (1,_,1): return 1 / beta(a: a, b: b)
    case (1,_,_): return 0
    case (_,_,_): return pow(x,a - 1) * pow(1 - x,b-1) / beta(a: a,b: b)
    }
}

/// Inverse of the Regularized Incomplete Beta function
///
/// xp such that I(xp, a, b) = p
///
/// Handles some special cases first, then general case uses an approximation
/// followed by Halley's method on I(x, a, b) - p
///
/// Numerical Receipes ¬ß6.4
public func invBetaReg(p: Probability, a: Double, b: Double) -> Double {
    // Cases we can handle directly in closed form
    switch (p.p,p.q,a,b) {
    // handle domain edges
    case (_,_,...0,_): return .nan
    case (_,_,_,...0): return .nan
    case (..<0,_,_,_): return .nan
    case (0,_,_,_): return 0
    case (_,0,_,_): return 1
    case (1...,_,_,_): return .nan
        
    // a and b both 1 function is identity. I(x,1,1) = x
    case (_,_,1,1): return p.p
        
    // If only one is 1 we make it be b and I‚Åª¬π(p,a,1) = p^(1/a)
    case (_,_,1,_): return 1 - invBetaReg(p: .p(p.q), a: b, b: a)
    case (..<0.5,_,_,1): return pow(p.p, 1 / a)
    case (_,_,_,1): return exp(log1p(-p.q) / a)
        
    // Both one half, I‚Åª¬π(p,1/2,1/2) = sin(p œÄ / 2)¬≤
    case (_,_,0.5,0.5): return sin(p.p * Double.pi/2)^^2

    // Otherwise we continue
    case (_,_,_,_): break
    }
    
    // Get our initial guess for root finding
    let guess: Double = {
        switch (a,b) {
        // Both a and b greater than 1
        // approximation from HMF ¬ß26.5.22
        case (1...,1...):
            // inverse normal approximation
            let yp = p.p < 0.5 ? qapprox(p: p.p) : -qapprox(p: p.q)
            let Œª = (yp^^2 - 3.0) / 6.0
            let h = 2.0 / (1.0 / (2.0 * a - 1.0) + 1.0 / (2.0 * b - 1.0))
            let w = yp * sqrt(h + Œª) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (Œª + 5 / 6 - 2 / (3 * h))
            return a / (a + b * exp(2.0 * w))
        // At least one of a and b < 1. Use NR approximation
        case (_,_):
            let lna = log(a / (a + b))
            let lnb = log(b / (a + b))
            let t = exp(a * lna) / a
            let u = exp(b * lnb) / b
            let w = t + u
            if p.p < t / w { return pow(a * w * p.p, 1 / a) }
            return 1 - pow(b * w * p.q, 1 / b)
        }
    }()
    
    // Halley's method
    // I'(x,a,b) = x^(a - 1) (1 - x)^(b - 1) / B(a,b)
    // I''(x,a,b) = -x^(a - 2) (1 - x)^(b - 2) (x (b - 2) + (x - 1) a + 1) / B(a,b)
    // I''(x,a,b) / I'(x,a,b) = (x (b - 2) + (x - 1) a + 1) / (x (1 - x))
    //            = (b - 2) / (1 - x) - a / x + 1 / (x (1 - x))
    //            = (b - 1) / (1 - x) - (a - 1) / x - 1 / (1 - x) - 1 / x + 1 / (x (1 - x))
    //            = (b - 1) / (1 - x) - (a - 1) / x - x / (x (1 - x)) - (1 - x) / (x (1 - x)) + 1 / (x (1 - x))
    //            = (b - 1) / (1 - x) - (a - 1) / x
    let afac = -lbeta(a: a, b: b)
    let a1 = a - 1
    let b1 = b - 1
    let x = root(guess: guess,
                    xmin: 0,
                    xmax: 1,
                    maxIter: 10,
                    f: { x in betaReg(x: x, a: a, b: b).difference(p) },
                    f1: { x in exp(a1 * log(x) + b1 * log(1 - x) + afac) },
                    f2f1: { x in a1 / x - b1 / (1 - x) }).value
    return x
}

